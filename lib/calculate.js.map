{"version":3,"sources":["../src/calculate.js"],"names":["numToString","arg","l","numString","toString","split","length","e","Number","replace","decimalLen","Calculate","arg1","arg2","argR1","argR2","num1","l1","num2","l2","c","Math","abs","m","pow","max","cm","r1","r2","calculator"],"mappings":"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","file":"calculate.js","sourcesContent":["/**\n * 利用字符串去除小数点\n * @param {*} arg 待处理的数据\n * @return {*} numString 去除小数点转化得到的整数\n * @return {*} decimalLen 数字精度\n */\nfunction numToString(arg) {\n  let l, numString;\n  try {\n    numString = arg.toString();\n    l = numString.split(\".\")[1].length;\n  } catch (e) {\n    l = 0;\n  }\n\n  return {\n    numString: Number(numString.replace(\".\", \"\")),\n    decimalLen: l\n  };\n}\n\nclass Calculate {\n  add(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n\n    let num1 = argR1.numString,\n      l1 = argR1.decimalLen,\n      num2 = argR2.numString,\n      l2 = argR2.decimalLen;\n\n    let c = Math.abs(l1 - l2);\n    let m = Math.pow(10, Math.max(l1, l2));\n    //cm：俩数小数点位数之差*10\n    if (c > 0) {\n      var cm = Math.pow(10, c);\n      r1 > r2 ? (num2 = num2 * cm) : (num1 = num1 * cm);\n    }\n    return (num1 + num2) / m;\n  }\n\n  subtract(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n\n    let num1 = argR1.numString,\n      l1 = argR1.decimalLen,\n      num2 = argR2.numString,\n      l2 = argR2.decimalLen;\n\n    let c = Math.abs(l1 - l2);\n    let m = Math.pow(10, Math.max(l1, l2));\n    //cm：俩数小数点位数之差*10\n    if (c > 0) {\n      var cm = Math.pow(10, c);\n      l1 > l2 ? (num2 = num2 * cm) : (num1 = num1 * cm);\n    }\n\n    return (num1 - num2) / m;\n  }\n\n  multiply(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n\n    let num1 = argR1.numString,\n      l1 = argR1.decimalLen,\n      num2 = argR2.numString,\n      l2 = argR2.decimalLen;\n\n    let m = l1 + l2;\n\n    return num1 * num2 / Math.pow(10, m);\n  }\n\n  divide(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n\n    let num1 = argR1.numString,\n      l1 = argR1.decimalLen,\n      num2 = argR2.numString,\n      l2 = argR2.decimalLen;\n\n    let m = l2 - l1;\n\n    return m >= 0\n      ? num1 * Math.pow(10, m) / num2\n      : num1 / (num2 * Math.pow(10, c));\n  }\n}\n\nconst calculator = new Calculate();\n\nexport default calculator;\n"]}