{"version":3,"sources":["../src/smpCal.js"],"names":["SmpCal","add","arg1","arg2","argR1","argR2","n1","intNum","p1","precision","n2","p2","c","Math","abs","m","pow","max","cm","sub","mul","div","module","exports"],"mappings":";;AAKA;;;;;;0JALA;;;;;IAOMA,M;;;;;SACFC,G,GAAM,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAClB,YAAIC,QAAQ,2BAAaF,IAAb,CAAZ;AACA,YAAIG,QAAQ,2BAAaF,IAAb,CAAZ;AAFkB,YAGJG,EAHI,GAGkBF,KAHlB,CAGZG,MAHY;AAAA,YAGWC,EAHX,GAGkBJ,KAHlB,CAGAK,SAHA;AAAA,YAIJC,EAJI,GAIkBL,KAJlB,CAIZE,MAJY;AAAA,YAIWI,EAJX,GAIkBN,KAJlB,CAIAI,SAJA;;;AAMlB,YAAIG,IAAIC,KAAKC,GAAL,CAASN,KAAKG,EAAd,CAAR;AACA,YAAII,IAAIF,KAAKG,GAAL,CAAS,EAAT,EAAaH,KAAKI,GAAL,CAAST,EAAT,EAAaG,EAAb,CAAb,CAAR;;AAEA,YAAIC,IAAI,CAAR,EAAW;AACP,gBAAIM,KAAKL,KAAKG,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAT;AACAJ,iBAAKG,EAAL,GAAWD,KAAKA,KAAKQ,EAArB,GAA4BZ,KAAKA,KAAKY,EAAtC;AACH;;AAED,eAAO,CAACZ,KAAKI,EAAN,IAAYK,CAAnB;AACH,K;;SAEDI,G,GAAM,UAACjB,IAAD,EAAOC,IAAP,EAAgB;AAClB,eAAO,MAAKF,GAAL,CAASC,IAAT,EAAe,CAACC,IAAhB,CAAP;AACH,K;;SAEDiB,G,GAAM,UAAClB,IAAD,EAAOC,IAAP,EAAgB;AAClB,YAAIC,QAAQ,2BAAaF,IAAb,CAAZ;AACA,YAAIG,QAAQ,2BAAaF,IAAb,CAAZ;AAFkB,YAGJG,EAHI,GAGkBF,KAHlB,CAGZG,MAHY;AAAA,YAGWC,EAHX,GAGkBJ,KAHlB,CAGAK,SAHA;AAAA,YAIJC,EAJI,GAIkBL,KAJlB,CAIZE,MAJY;AAAA,YAIWI,EAJX,GAIkBN,KAJlB,CAIAI,SAJA;;;AAMlB,YAAIM,IAAIP,KAAKG,EAAb;;AAEA,eAAOL,KAAKI,EAAL,GAAUG,KAAKG,GAAL,CAAS,EAAT,EAAaD,CAAb,CAAjB;AACH,K;;SAEDM,G,GAAM,UAACnB,IAAD,EAAOC,IAAP,EAAgB;AAClB,YAAIC,QAAQ,2BAAaF,IAAb,CAAZ;AACA,YAAIG,QAAQ,2BAAaF,IAAb,CAAZ;AAFkB,YAGJG,EAHI,GAGkBF,KAHlB,CAGZG,MAHY;AAAA,YAGWC,EAHX,GAGkBJ,KAHlB,CAGAK,SAHA;AAAA,YAIJC,EAJI,GAIkBL,KAJlB,CAIZE,MAJY;AAAA,YAIWI,EAJX,GAIkBN,KAJlB,CAIAI,SAJA;;;AAMlB,YAAIM,IAAIJ,KAAKH,EAAb;AACA,YAAII,IAAIC,KAAKC,GAAL,CAASC,CAAT,CAAR;AACA,eAAOA,KAAK,CAAL,GAAST,KAAKO,KAAKG,GAAL,CAAS,EAAT,EAAaD,CAAb,CAAL,GAAuBL,EAAhC,GAAqCJ,MAAMI,KAAKG,KAAKG,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAX,CAA5C;AACH,K;;;AAGLU,OAAOC,OAAP,GAAiB,IAAIvB,MAAJ,EAAjB","file":"smpCal.js","sourcesContent":["/**\n * @author 和霁\n * @date 2017-11-15\n */\n\nimport _numToString from \"./numTostring\";\n\nclass SmpCal {\n    add = (arg1, arg2) => {\n        let argR1 = _numToString(arg1);\n        let argR2 = _numToString(arg2);\n        let { intNum: n1, precision: p1 } = argR1;\n        let { intNum: n2, precision: p2 } = argR2;\n\n        let c = Math.abs(p1 - p2);\n        let m = Math.pow(10, Math.max(p1, p2));\n\n        if (c > 0) {\n            var cm = Math.pow(10, c);\n            p1 > p2 ? (n2 = n2 * cm) : (n1 = n1 * cm);\n        }\n\n        return (n1 + n2) / m;\n    };\n\n    sub = (arg1, arg2) => {\n        return this.add(arg1, -arg2);\n    };\n\n    mul = (arg1, arg2) => {\n        let argR1 = _numToString(arg1);\n        let argR2 = _numToString(arg2);\n        let { intNum: n1, precision: p1 } = argR1;\n        let { intNum: n2, precision: p2 } = argR2;\n\n        let m = p1 + p2;\n\n        return n1 * n2 / Math.pow(10, m);\n    };\n\n    div = (arg1, arg2) => {\n        let argR1 = _numToString(arg1);\n        let argR2 = _numToString(arg2);\n        let { intNum: n1, precision: p1 } = argR1;\n        let { intNum: n2, precision: p2 } = argR2;\n\n        let m = p2 - p1;\n        let c = Math.abs(m);\n        return m >= 0 ? n1 * Math.pow(10, m) / n2 : n1 / (n2 * Math.pow(10, c));\n    };\n}\n\nmodule.exports = new SmpCal();\n"]}