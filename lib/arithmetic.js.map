{"version":3,"sources":["../src/arithmetic.js"],"names":["numToString","arg","precision","numString","toString","split","length","e","num","Number","replace","Arithmetic","arg1","arg2","argR1","argR2","n1","p1","n2","p2","c","Math","abs","m","pow","max","cm","module","exports"],"mappings":"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","file":"arithmetic.js","sourcesContent":["/**\n * 利用字符串去除小数点\n * @param {*} arg 待处理的数据\n * @return {*} numString 去除小数点转化得到的整数\n * @return {*} decimalLen 数字精度\n */\nfunction numToString(arg) {\n  let precision, numString;\n  try {\n    numString = arg.toString();\n    precision = numString.split(\".\")[1].length;\n  } catch (e) {\n    precision = 0;\n  }\n\n  return {\n    num: Number(numString.replace(\".\", \"\")),\n    precision\n  };\n}\n\nclass Arithmetic {\n  add(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n    let { num: n1, precision: p1 } = argR1;\n    let { num: n2, precision: p2 } = argR2;\n\n    let c = Math.abs(p1 - p2);\n    let m = Math.pow(10, Math.max(p1, p2));\n\n    if (c > 0) {\n      var cm = Math.pow(10, c);\n      p1 > p2 ? (n2 = n2 * cm) : (n1 = n1 * cm);\n    }\n    return (n1 + n2) / m;\n  }\n\n  subtract(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n    let { num: n1, precision: p1 } = argR1;\n    let { num: n2, precision: p2 } = argR2;\n\n    let c = Math.abs(p1 - p2);\n    let m = Math.pow(10, Math.max(p1, p2));\n\n    if (c > 0) {\n      var cm = Math.pow(10, c);\n      p1 > p2 ? (n2 = n2 * cm) : (n1 = n1 * cm);\n    }\n\n    return (n1 - n2) / m;\n  }\n\n  multiply(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n    let { num: n1, precision: p1 } = argR1;\n    let { num: n2, precision: p2 } = argR2;\n\n    let m = p1 + p2;\n\n    return n1 * n2 / Math.pow(10, m);\n  }\n\n  divide(arg1, arg2) {\n    let argR1 = numToString(arg1);\n    let argR2 = numToString(arg2);\n    let { num: n1, precision: p1 } = argR1;\n    let { num: n2, precision: p2 } = argR2;\n\n    let m = p2 - p1;\n    let c = Math.abs(m);\n    return m >= 0 ? n1 * Math.pow(10, m) / n2 : n1 / (n2 * Math.pow(10, c));\n  }\n}\n\nmodule.exports = new Arithmetic();\n"]}